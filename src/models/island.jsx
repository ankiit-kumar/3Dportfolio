/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { useRef, useEffect } from 'react';
import { useGLTF } from '@react-three/drei';
import { useFrame,useThree } from '@react-three/fiber';
import {a} from '@react-spring/three';
import islandScene from '../assets/3d/island.glb';

const Island=({isRotating,setIsRotating,setCurrentStage, ...props})=> {
  const islandRef=useRef();

  const{gl,viewport}=useThree();
  const { nodes, materials } = useGLTF(islandScene)
  const lastx=useRef(0);
  const rotationSpeed=useRef(0);
  const dampingFactor=0.95;


  const handlePointerDown=(e)=>{
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
    const clientX=e.touches?e.touches[0].clientX:e.clientX;
    lastx.current=clientX;{/*storing the last position of user's cursor touch on screen */}
  }


  const handlePointerUp=(e)=>{
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
    
  }


  const handlePointerMove=(e)=>{
    e.stopPropagation();
    e.preventDefault();
    if(isRotating){
      const clientX=e.touches?e.touches[0].clientX:e.clientX;
    const delta=(clientX-lastx.current)/viewport.width;{/*the current position changes according to previous location
      since we need the position on the screen we use the viewport.width any changes is stored in delta */}
      islandRef.current.rotation.y+=delta*0.01*Math.PI;
      lastx.current=clientX;
      rotationSpeed.current=delta*0.01*Math.PI;
    }
    
  }

  //here we are trying to move the island using the keyboard as well 
  const handlekeyDown=(e)=>{
    if(e.key==='ArrowLeft'){
      if(!isRotating) setIsRotating(true);
      islandRef.current.rotation.y +=0.01 *Math.PI;//Pi is used as the island shall rotate in circle at a speed 
      rotationSpeed.current=0.0125;
    }
    else if(e.key==='ArrowRight'){
      if(!isRotating) setIsRotating(true);
      islandRef.current.rotation.y -=0.01 *Math.PI;//Pi is used as the island shall rotate in circle at a speed 
      rotationSpeed.current=-0.0125;
    }
    }
  
//keyboard handling of the island using the keys
    const handlekeyUp=(e)=>{
      if(e.key==='ArrowLeft'  || e.key==='ArrowRight'){
        setIsRotating(false);
      }
    }
  useFrame(()=>{

    if(!isRotating){
      rotationSpeed.current*=dampingFactor;//speed becomes slower gradually
      if(Math.abs(rotationSpeed.current)<0.001)
        {//after the damping of speed it completely stops after some time
        rotationSpeed.current=0;
      }
      //the below expression adds to the smoothness of the rotation

      islandRef.current.rotation.y+=rotationSpeed.current;
    }
    else 
    {
      const rotation=islandRef.current.rotation.y;

      const normalizedRotation =((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // Set the current stage based on the island's orientation


      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  })  


  useEffect(()=>{
    const canvas=gl.domElement;
    document.addEventListener('pointerdown',handlePointerDown);
    document.addEventListener('pointerup',handlePointerUp);
    document.addEventListener('pointermove',handlePointerMove);
    document.addEventListener('keydown',handlekeyDown);
    document.addEventListener('keyup',handlekeyUp);

    return()=>{

    document.removeEventListener('pointerdown',handlePointerDown);
    document.removeEventListener('pointerup',handlePointerUp);
    document.removeEventListener('pointermove',handlePointerMove);
    document.removeEventListener('keydown',handlekeyDown);
    document.removeEventListener('keyup',handlekeyUp);
    
  }

  },[gl,handlePointerDown,handlePointerUp,handlePointerMove])


  return (
    <a.group  ref={islandRef}{...props} >
      <mesh      
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
         geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        
       
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        
       
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}


export default Island;
